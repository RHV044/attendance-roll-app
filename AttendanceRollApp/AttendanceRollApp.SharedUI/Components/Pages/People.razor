@page "/people"
@using Microsoft.FluentUI.AspNetCore.Components
@inject NavigationManager NavigationManager;
@inject IPersonRepository PersonRepository;
@inject IDialogService DialogService
@inject IToastService ToastService

<h1>Personas registradas</h1>
<p>Esta es la lista de personas que pueden registrar su asistencia con su tarjeta SUBE</p>

@if (people == null)
{
    <FluentProgress></FluentProgress>
}
else
{
    <div id="PeopleGridContainer">
        <FluentDataGrid Items="@people">
            <ChildContent>
                <PropertyColumn Tooltip=true Class="grid-person" Property="@(p => p.NationalID)" Title="DNI" Sortable="true" />
                <PropertyColumn Tooltip=true Class="grid-person" Property="@(p => $"{p.FirstName} {p.LastName}")" Title="Nombre" Sortable="true" />
                <PropertyColumn Tooltip=true Class="grid-person" Property="@(p => p.Gender)" Title="Género" Sortable="true" />
                <PropertyColumn Tooltip=true Class="grid-person" Property="@(p => p.BirthDate)" Title="Fecha nacimiento" Format="yyyy-MM-dd" Sortable="true" />
                <PropertyColumn Tooltip=true Class="grid-person" Property="@(p => String.Join(", ",p.NfcSerialNumbers))" Title="Tarjetas SUBE" Sortable="true" />
                <PropertyColumn Tooltip=true Class="grid-person" Property="@(p => p.CreatedDate)" Title="Fecha creación" Format="yyyy-MM-dd HH:mm" Sortable="true" />
                <PropertyColumn Tooltip=true Class="grid-person" Property="@(p => p.LastUpdatedDate)" Title="Fecha última modificación" Format="yyyy-MM-dd HH:mm" Sortable="true" />
                <TemplateColumn Tooltip=true Class="grid-person" Title="Actions" Align="@Align.End">
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(async() => await DeletePersonConfirm(context))" />
                </TemplateColumn>
            </ChildContent>
            <EmptyContent>
                <FluentIcon Value="@(new Icons.Filled.Size24.Search())" Color="@Color.Accent" />
                &nbsp; No encontramos a nadie
            </EmptyContent>
        </FluentDataGrid>
    </div>
}

<br />
<FluentButton IconStart="@(new Icons.Regular.Size20.Person())"
              Appearance="Appearance.Accent"
              OnClick="AddPersonDialog">
    Agregar Persona
</FluentButton>

@code {
    private IQueryable<Person>? people = null;

    protected override async Task OnInitializedAsync()
    {
        people = await getPeople();
    }

    private async Task DeletePersonConfirm(Person person)
    {
        await PersonRepository.Delete(person);
        people = null;
        people = await getPeople();

    }
    private async Task<IQueryable<Person>> getPeople()
    {
        return ((await PersonRepository.GetMany()) ?? new Person[] { }).AsQueryable();
    }
    private async Task AddPersonDialog()
    {
        DialogParameters parameters = new()
            {
                PrimaryActionEnabled = true,
                Width = "500px",
                TrapFocus = true,
                Modal = false,
                PreventScroll = true,
                Title = "",
                PrimaryAction = "",
                SecondaryAction = "",
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<AddPerson>(new Person(), parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is not null)
        {
            people = null;
            people = await getPeople();
            var addedPerson = result.Data as Person;
            ToastService.ShowToast(ToastIntent.Success, $"{addedPerson?.FirstName} ha sido agregado");
        }

    }
}
